#! /usr/bin/env bash

#
# Show and share clipboard content.
#
# Show clipboard content using Parcellite clipboard manager. The script uses
# Python module for QR code creation in order to share the content of the
# clipboard buffer with external devices and a notification client to
# display the content on screen.
#
# Author:     Riccardo Finotello
# E-mail:     riccardo.finotello@gmail.com
#
# Copyright:  2020 - Riccardo Finotello
# License:    MIT License
#

# Show usage
function show_usage() {
  USAGE="$(basename $0) [-h] [-c BUF] [-n BUF] [-q BUF]"
  printf "\n%s\n%s\n" "Usage:" "    $USAGE"
}

# Show help
function show_help() {
  show_usage

  printf "\n%s\n\n" "Show and share clipboard content."
  printf "%s\n" "OPTIONS:"
  printf "%s\n" "    -h               Show this help and exit"
  printf "%s\n" "    -c BUF           Select clipboard buffer BUF"
  printf "%s\n" "    -n BUF           Send a notification showing buffer BUF"
  printf "%s\n" "    -q BUF           Generates QR code from buffer BUF"
  printf "\n%s\n" "BUF:"
  printf "%s\n" "    p or primary     Show the primary buffer (middle mouse click)"
  printf "%s\n" "    c or clipboard   Show the clipboard buffer (ctrl+v)"

  printf "\n%s\n%s\n\n" \
    "For bug report and info: riccardo.finotello@gmail.com" \
    "Copyright (c) 2020 - Riccardo Finotello - MIT License"
}

# Check if the clipboard manager is installed
[[ -x $(which parcellite) ]] || exit 1

# Check if the Python module to generate QR codes is installed
[[ -x $(which qr) ]] || exit 1

# Define the image viewer
[[ -x $(which feh) ]] && IMG="feh -Z" || IMG=xdg-open

# Show clipboard content
function show_clipboard() {
  case $1 in
    p|primary)
      printf "%s\n" "$(parcellite -p)"
      ;;
    c|clipboard)
      printf "%s\n" "$(parcellite -c)"
      ;;
    *)
      printf "%s\n" "Wrong BUF type: $1 is not a good BUF." >&2
      show_usage
      exit 1
      ;;
  esac
}

# Show a notification including the content of the clipboard (${arg:0:1} takes
# only the initial letter of $arg and ${1^} switches the case of the first
# character)
function send_notification() {
  ARG=${1:0:1}

  case $ARG in
    p)
      TITLE="Primary buffer"
      ;;
    c)
      TITLE="Clipboard buffer"
      ;;
    *)
      printf "%s\n" \
        "Internal error: parsed wrong argument." >&2
      exit 1
      ;;
  esac

  notify-send \
  -a "Clipboard" \
  -i "dialog-information-symbolic.symbolic" \
  "$TITLE" \
  "$(show_clipboard $ARG)"
}

function show_notification() {
  case $1 in
    p|primary|c|clipboard)
      show_clipboard $1
      send_notification $1
      ;;
    *)
      printf "%s\n" "Wrong BUF type: $1 is not a good BUF." >&2
      show_usage
      exit 1
      ;;
  esac
}

# Create the QR code (${arg:0:1} takes only the initial letter of $arg)
function choose_img_viewer() {
  ARG=${1:0:1}

  [[ $DISPLAY ]] \
      && (parcellite -$ARG| qr| $IMG -) \
      || (parcellite -$ARG| qr)
}

function show_qr() {
  case $1 in
    p|primary|c|clipboard)
      show_clipboard $1
      send_notification $1
      choose_img_viewer $1
      ;;
    *)
      printf "%s\n" "Wrong BUF type: $1 is not a good BUF." >&2
      show_usage
      exit 1
      ;;
  esac
}

# Parse options
while getopts ":hc:n:q:" opt; do
  case $opt in
    h)
      show_help
      exit 0
      ;;
    c)
      show_clipboard $OPTARG
      exit 0
      ;;
    n)
      [[ $DISPLAY ]] \
          && (show_notification $OPTARG && exit 0) \
          || (printf "%s\n" "Unable to show notifications." >&2 && exit 1)
      ;;
    q)
      show_qr $OPTARG
      exit 0
      ;;
    \?)
      printf "%s\n" "Invalid option: -$OPTARG is not an option." >&2
      show_usage
      exit 1
      ;;
    :)
      printf "%s\n" "Missing argument: -$OPTARG requires an argument." >&2
      show_usage
      exit 1
      ;;
    *)
      show_help
      exit 1
      ;;
  esac
done

# ------------------------------------
# COMMANDS AND INFO
# ------------------------------------
[[ -z $* ]] && (show_help && exit 1)

# vim: ft=sh
