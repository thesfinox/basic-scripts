#! /usr/bin/env bash

#
# Display and manage audio volume.
#
# Use amixer to display and manage volume in a very simple way.
#
# Author:     Riccardo Finotello
# E-mail:     riccardo.finotello@gmail.com
#
# Copyright:  2020 - Riccardo Finotello
# License:    MIT License
#

# ------------------------------------
# OPTIONS, HELP, USAGE AND CHECKS
# ------------------------------------

# Show usage
function show_usage() {
    USAGE="$(basename $0) [-h] [-t|-T] [-O|-o] [-M|-m] [-s]"
    printf "\n%s\n%s\n" "Usage:" "    $USAGE"
}

# Show help
function show_help() {
    show_usage

    printf "\n%s\n\n" "Display and manage audio volume."
    printf "%s\n" "OPTIONS:"
    printf "%s\n" "    -h         Show this help and exit"
    printf "%s\n" "    -t         Toggle output"
    printf "%s\n" "    -T         Toggle input"
    printf "%s\n" "    -O QTY     Increase output volume by QTY"
    printf "%s\n" "    -o QTY     Decrease output volume by QTY"
    printf "%s\n" "    -M QTY     Increase input volume by QTY"
    printf "%s\n" "    -m QTY     Decrease input volume by QTY"
    printf "%s\n" "    -s         Show current status"
    printf "%s\n" "    -S         Show current status (i3blocks style)"

    printf "\n%s\n%s\n\n" \
           "For bug report and info: riccardo.finotello@gmail.com" \
           "Copyright (c) 2020 - Riccardo Finotello - MIT License"
}

# Check if amixer is installed
[[ -x $(which amixer) ]] || exit 1

# Show status
function show_status() {
    FRONTLEFT=$(amixer sget $1,0| awk '/Front Left:/ {print $5}'| tr -d '[%]')
    FRONTRIGHT=$(amixer sget $1,0| awk '/Front Right:/ {print $5}'| tr -d '[%]')

    echo $(( ( $FRONTLEFT + $FRONTRIGHT ) / 2 ))
}

# Parse options
while getopts ":htTO:o:M:m:sS" opt; do
    case $opt in
      h)
          show_help
          exit 0
          ;;
      t)
          amixer sset Master,0 toggle
          exit 0
          ;;
      T)
          amixer sset Capture,0 toggle
          exit 0
          ;;
      O)
          amixer sset Master,0 $OPTARG%+
          exit 0
          ;;
      o)
          amixer sset Master,0 $OPTARG%-
          exit 0
          ;;
      M)
          amixer sset Capture,0 $OPTARG%+
          exit 0
          ;;
      m)
          amixer sset Capture,0 $OPTARG%-
          exit 0
          ;;
      s)
          INPUTSTATUS=$(amixer sget Master,0| grep -E '\<on\>')
          OUTPUTSTATUS=$(amixer sget Capture,0| grep -E '\<on\>')

          ([[ $INPUTSTATUS ]] && [[ $OUTPUTSTATUS ]]) \
              && echo -e "\ufa7d $(show_status Master)% \uf130 $(show_status Capture)%"
          ([[ $INPUTSTATUS ]] && [[ ! $OUTPUTSTATUS ]]) \
              && echo -e "\ufa7d $(show_status Master)% \uf131"
          ([[ ! $INPUTSTATUS ]] && [[ $OUTPUTSTATUS ]]) \
              && echo -e "\ufa80 \uf130 $(show_status Capture)%"
          ([[ ! $INPUTSTATUS ]] && [[ ! $OUTPUTSTATUS ]]) \
              && echo -e "\ufa80 \uf131"

          exit 0
          ;;
      S)
          INPUTSTATUS=$(amixer sget Master,0| grep -E '\<on\>')
          OUTPUTSTATUS=$(amixer sget Capture,0| grep -E '\<on\>')

          ([[ $INPUTSTATUS ]] && [[ $OUTPUTSTATUS ]]) \
              && echo -e "\ufa7d $(show_status Master)% \uf130 $(show_status Capture)%"
          ([[ $INPUTSTATUS ]] && [[ ! $OUTPUTSTATUS ]]) \
              && echo -e "\ufa7d $(show_status Master)% \uf131"
          ([[ ! $INPUTSTATUS ]] && [[ $OUTPUTSTATUS ]]) \
              && echo -e "\ufa80 \uf130 $(show_status Capture)%"
          ([[ ! $INPUTSTATUS ]] && [[ ! $OUTPUTSTATUS ]]) \
              && echo -e "\ufa80 \uf131"

          case $BLOCK_BUTTON in
              1)
                  [[ -x $(which alsamixer) ]] && $TERMINAL -e alsamixer
                  pkill -RTMIN+1 i3blocks
                  ;;
              3)
                  notify-send \
                  -a "Audio" \
                  -i "audio-volume-high-symbolic.symbolic" \
                  "Audio Information" \
                  "$(amixer sget Master| column -t -s':' -R 2)"

                  pkill -RTMIN+1 i3blocks
                  ;;
          esac

          exit 0
          ;;
      \?)
          printf "%s\n" "Invalid option: -$OPTARG." >&2
          show_usage
          exit 1
          ;;
      :)
          printf "%s\n" "-$OPTARG requires an argument." >&2
          show_usage
          exit 1
          ;;
    esac
done
# f-args: -s

# ------------------------------------
# COMMANDS AND INFO
# ------------------------------------
[[ -z $* ]] && (show_help && exit 1)

# vim: ft=sh
