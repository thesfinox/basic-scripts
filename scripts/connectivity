#! /usr/bin/env bash

#
# Display connection info.
#
# The script uses Wicd in order to get the current status of the interfaces.
#
# Author:     Riccardo Finotello
# E-mail:     riccardo.finotello@gmail.com
#
# Copyright:  Alessandra Cappati and Riccardo Finotello - 2019
# License:    MIT License
#

# ------------------------------------
# OPTIONS, HELP, USAGE AND CHECKS
# ------------------------------------

# Show usage
function show_usage() {
  USAGE="$(basename $0) [-h] COMMAND"
  printf "\n%s\n%s\n" "Usage:" "    $USAGE"
}

# Show help
function show_help() {
  show_usage

  printf "\n%s\n\n" "Toggle Wifi on and off and display connection info."
  printf "%s\n" "OPTIONS:"
  printf "%s\n" "    -h         Show this help and exit"
  printf "\n%s\n" "COMMAND:"
  printf "%s\n" "    current    Show currently connected interface(s)"
  printf "%s\n" "    ip         Show IP of the connected interface(s)"

  printf "\n%s\n%s\n\n" \
    "For bug report and info: riccardo.finotello@gmail.com" \
    "Copyright (c) 2019 -  Alessandra Cappati and Riccardo Finotello - MIT License"
}

# Check if NetworkManager is installed
if [[ ! -z $(which wicd-cli) ]]; then
  WICD=$(which wicd-cli)
else
  printf "%s\n%s\n%s\n" \
    "Wicd command line interface is not in the PATH." \
    "You might have to install it. E.g.: sudo apt install wicd-cli." \
    "Wicd CLI is required for this script to run."
  exit 1
fi

# Parse options
while getopts ":h" opt; do
  case $opt in
    h)
      show_help
      exit 0
      ;;
    \?)
      printf "%s\n" "Invalid option: -$OPTARG." >&2
      show_usage
      exit 1
      ;;
    :)
      printf "%s\n" "-$OPTARG requires an argument." >&2
      show_usage
      exit 1
      ;;
  esac
done

# ------------------------------------
# COMMANDS AND INFO
# ------------------------------------

if [[ -z $1 ]]; then
  show_help
  exit 1
fi

# Check if the notification client is installed
if [[ ! -z $(which notify-send) ]]; then
  NOTIFICATIONS=$(which notify-send)
else
  printf "%s\n%s\n%s\n" \
    "The notification client is not in the PATH." \
    "You might have to install it. E.g.: sudo apt install ruby-notify." \
    "Some of the functionalities of this script may be compromised otherwise."
fi

# Clickable block when using i3blocks in i3wm
function show_notification() {
  ICON="/usr/share/icons/gnome/48x48/status/network-idle.png"
  if [[ -f $ICON  ]]; then
    NOTIFICATIONS="$NOTIFICATIONS --icon $ICON"
  fi
  
  $NOTIFICATIONS -a "Connections" --category=network "Connection manager" "$($WICD -i | grep -v 'Network ID')"
}

# Show currently connected interface(s)
function get_wifi_info() {
  WIFIINFO=$($WICD -d -y)
  WIFINAME=$(printf "%s\n" "$WIFIINFO"| awk -F ': ' '/^Essid/ {print $2}')
  WIFISIGNAL=$(printf "%s\n" "$WIFIINFO"| awk -F ': ' '/^Quality/ {print $2}')

  if [[ ! -z $WIFINAME ]] && [[ ! -z $WIFISIGNAL ]]; then
    printf "%s (%s%%)\n" "$WIFINAME" "$WIFISIGNAL"
  fi
}

function get_ethernet_info() {
  ETHERNET=$($WICD -i -z | grep "Wired")

  printf "%s\n" "$ETHERNET"
}

function show_current() {
  if [[ ! -z $(get_wifi_info) ]] && [[ ! -z $(get_ethernet_info) ]]; then
    echo -e "\uf1eb $(get_wifi_info)\n\uf6ff Ethernet"
  elif [[ ! -z $(get_wifi_info) ]] && [[ -z $(get_ethernet_info) ]]; then
    echo -e "\uf1eb $(get_wifi_info)"
  elif [[ -z $(get_wifi_info) ]] && [[ ! -z $(get_ethernet_info) ]]; then
    echo -e "\uf6ff Ethernet"
  else
    echo -e "\ufaa9 No connection"
  fi
}

# Show current IP address
function show_ip() {
  if [[ ! -z $(get_wifi_info) ]]; then
    WIFIIP=$($WICD -d -y | awk -F ': ' '/^IP/ {print $2}')
  fi
  if [[ ! -z $(get_ethernet_info) ]]; then
    ETHERNETIP=$($WICD -i -z | awk -F ': ' '/IP/ {gsub(")",""); print $2}')
  fi

  # Print output
  if [[ ! -z $WIFIIP ]] && [[ ! -z $ETHERNETIP ]]; then
    echo -e "\uf1eb $WIFIIP\n\uf6ff $ETHERNETIP"
  elif [[ ! -z $WIFIIP ]] && [[ -z $ETHERNETIP ]]; then
    echo -e "\uf1eb $WIFIIP"
  elif [[ -z $WIFIIP ]] && [[ ! -z $ETHERNETIP ]]; then
    echo -e "\uf6ff $ETHERNETIP"
  else
    echo -e "\ufaa9 No connection"
  fi
}

# Clickable widget for i3wm
function clickable_widget() {
  case $BLOCK_BUTTON in
    1)
      /usr/bin/pkill -RTMIN+1 i3blocks
      if [[ ! -z $(which rofi) ]]; then
        XMENU=$(which rofi)
        HEAD=$($WICD -l -y | head -n1)
        LIST=$($WICD -l -y | tail -n+2)
        CHOICE=$(echo "$LIST" | $XMENU -dmenu -p "Choose Wi-Fi connection: " -mesg "$HEAD")
        if [[ ! -z $CHOICE ]]; then
          $WICD -n $(echo $CHOICE | awk '{print $1}') -y -c
        fi
      fi
      ;;
    2)
      /usr/bin/pkill -RTMIN+1 i3blocks
      ;;
    3)
      /usr/bin/pkill -RTMIN+1 i3blocks
      show_notification
      ;;
  esac
}

# Parse commands
case $1 in
  current)
    show_current
    clickable_widget
    exit 0
    ;;
  ip)
    show_ip
    exit 0
    ;;
  *)
    printf "%s\n" "Invalid COMMAND: $1 is not a valid argument."
    show_help
    exit 1
    ;;
esac
