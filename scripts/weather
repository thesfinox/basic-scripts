#! /usr/bin/env bash

#
# Get weather information.
#
# Display current weather information from openweathermap.org for a specific
# location.
#
# Author:     Riccardo Finotello
# E-mail:     riccardo.finotello@gmail.com
#
# Copyright:  2020 - Riccardo Finotello
# License:    MIT License
#

# ------------------------------------
# OPTIONS, HELP, USAGE AND CHECKS
# ------------------------------------

# Show usage
function show_usage() {
    USAGE="$(basename $0) [-h] [-v|-s] [-b]"
    printf "\n%s\n%s\n" "Usage:" "    $USAGE"
}

# Show help
function show_help() {
    show_usage

    printf "\n%s\n\n" "Get weather information."
    printf "%s\n" "OPTIONS:"
    printf "%s\n" "    -h         Show this help and exit"
    printf "%s\n" "    -v         Verbose version"
    printf "%s\n" "    -s         Short version"
    printf "%s\n" "    -b         i3blocks version"

    printf "\n%s\n%s\n\n" \
           "For bug report and info: riccardo.finotello@gmail.com" \
           "Copyright (c) 2020 - Riccardo Finotello - MIT License"
}

# Check if curl is installed
[[ -x $(which curl) ]] || exit 1

# Check if JSON parser is installed
[[ -x $(which jq) ]] || exit 1

# Check config file
[[ -f $XDG_CONFIG_HOME/openweather/config ]] \
    && source $XDG_CONFIG_HOME/openweather/config

# Check if API key is not empty
[[ ! $API ]] && (printf "Missing API key!" && exit 1)

# Define city id
ID=${CITYID:-3165523}

# API URL
URL=https://api.openweathermap.org/data/2.5/weather

# Curl information
RESPONSE=$(curl -Ss "$URL/?id=$ID&appid=$API")

# Print icon
function print_icon() {
    case $1 in
        2[0-9]*)
            echo "\ue31d"
            ;;
        3[0-9]*)
            echo "\ue316"
            ;;
        50[0-9])
            echo "\ue318"
            ;;
        511)
            echo "\ue316"
            ;;
        5[2-3][0-9])
            echo "\ue34a"
            ;;
        6[0-9]*)
            echo "\ue313"
            ;;
        7[0-9]*)
            echo "\ue313"
            ;;
        800)
            echo "\uf185"
            ;;
        801)
            echo "\ue21d"
            ;;
        802)
            echo "\ue268"
            ;;
        803|804)
            echo "\ue312"
            ;;
        *)
            printf "%s\n" "Invalid icon!"
            exit 1
            ;;
    esac
}

#  Get weather information
function get_weather_short() {
    WEATHERID=$(echo $RESPONSE| jq '.weather[0].id')
    REALTEMP=$(echo $RESPONSE| jq '.main.temp')

    printf "$(print_icon $WEATHERID) $(( ${REALTEMP%%.*} - 273 ))°C\n"
}

function get_weather_verbose() {
    CITYNAME=$(echo $RESPONSE| jq '.name'| tr -d '\"')
    COUNTRYCODE=$(echo $RESPONSE| jq '.sys.country'| tr -d '\"')
    WEATHERID=$(echo $RESPONSE| jq '.weather[0].id')
    WEATHERDESC=$(echo $RESPONSE| jq '.weather[0].description'| tr -d '\"')
    REALTEMP=$(echo $RESPONSE| jq '.main.temp')
    PERCTEMP=$(echo $RESPONSE| jq '.main.feels_like')
    MINTEMP=$(echo $RESPONSE| jq '.main.temp_min')
    MAXTEMP=$(echo $RESPONSE| jq '.main.temp_max')
    HUMIDITY=$(echo $RESPONSE| jq '.main.humidity')
    PRESSURE=$(echo $RESPONSE| jq '.main.pressure')
    WINDSPEED=$(echo $RESPONSE| jq '.wind.speed')
    WINDDIR=$(echo $RESPONSE| jq '.wind.deg')

    printf "%s %s, %s:\n\n" \
        "Weather in " $CITYNAME $COUNTRYCODE

    printf "Condition: $(print_icon $WEATHERID) (%s)\n" \
        "$WEATHERDESC"

    printf "Temperature: %d°C (feels like %d°C)\n" \
        $(( ${REALTEMP%%.*} - 273 )) $(( ${PERCTEMP%%.*} - 273 ))

    printf "Temperature forecast: MIN %d°C, MAX %d°C\n" \
        $(( ${MINTEMP%%.*} - 273 )) $(( ${MAXTEMP%%.*} - 273 ))

    printf "Humidity: %d%%\n" \
        ${HUMIDITY%%.*}

    printf "Pressure: %d hPa\n" \
        ${PRESSURE%%.*}

    printf "Wind: %.1f m/s (direction %d°)\n" \
        $WINDSPEED ${WINDDIR%%.*}
}

# Parse options
while getopts ":hvsb" opt; do
    case $opt in
      h)
          show_help
          exit 0
          ;;
      v)
          get_weather_verbose
          exit 0
          ;;
      s)
          get_weather_short
          exit 0
          ;;
      b)
          get_weather_short

          case $BLOCK_BUTTON in
              3)
                  notify-send \
                  -a "Weather Information" \
                  -i "weather-clear-night-symbolic.symbolic" \
                  "Weather Information" \
                  "$(get_weather_verbose)"

                  pkill -RTMIN+1 i3blocks
                  ;;
          esac

          exit 0
          ;;
      \?)
          printf "%s\n" "Invalid option: -$OPTARG." >&2
          show_usage
          exit 1
          ;;
      :)
          printf "%s\n" "-$OPTARG requires an argument." >&2
          show_usage
          exit 1
          ;;
    esac
done

# ------------------------------------
# COMMANDS AND INFO
# ------------------------------------
[[ -z $* ]] && (show_help && exit 1)

# vim: ft=sh
