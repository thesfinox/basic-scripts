#! /usr/bin/env bash

#
# Show some status info.
#
# This script provides a simple and quick way to show information about the
# current system, such as OS, CPU load, RAM consumption, thermals, etc.
#
# Author:     Riccardo Finotello
# E-mail:     riccardo.finotello@gmail.com
#
# Copyright:  2020 - Riccardo Finotello
# License:    MIT License
#

# ------------------------------------
# OPTIONS, HELP, USAGE AND CHECKS
# ------------------------------------

# Show usage
function show_usage() {
  USAGE="$(basename $0) [-h] [-t] [-l] [-r] [-d] [-o] [-g]"
  printf "\n%s\n%s\n" "Usage:" "    $USAGE"
}

# Show help
function show_help() {
  show_usage

  printf "\n%s\n\n" "Show some status info."
  printf "%s\n" "OPTIONS:"
  printf "%s\n" "    -h   Show this help and exit"
  printf "%s\n" "    -t   Show CPU thermal reading"
  printf "%s\n" "    -l   Show CPU load avg. (last minute)"
  printf "%s\n" "    -r   Show available RAM"
  printf "%s\n" "    -d   Show disk usage"
  printf "%s\n" "    -o   Show OS name and kernel"
  printf "%s\n" "    -g   Show active graphic card"

  printf "\n%s\n%s\n\n" \
    "For bug report and info: riccardo.finotello@gmail.com" \
    "Copyright (c) 2020 - Riccardo Finotello - MIT License"
}

# Check if lm-sensors is installed
[[ -x $(which sensors) ]] || exit 1

# Check if lsb_release release is installed
[[ -x $(which lsb_release) ]] || exit 1

# Check if NVidia is installed
[[ -x $(which nvidia-smi) ]] || exit 1

# Show OS info
function show_os() {
    OS=$(lsb_release -d| tr -d '\t '| awk -F':' '{print $2}')
    KERN=$(uname -r)
    case $OS in
      ArchLinux)
        echo -e "\uf303 $KERN"
        ;;
      Ubuntu)
        echo -e "\ue73a $KERN"
        ;;
      Debian)
        echo -e "\ue77d $KERN"
        ;;
      Manjaro)
        echo -e "\ue312 $KERN"
        ;;
      openSUSE)
        echo -e "\uf314 $KERN"
        ;;
      centOS)
        echo -e "\uf304 $KERN"
        ;;
      Fedora)
        echo -e "\uf30a $KERN"
        ;;
      *)
        echo -e "$OS - $KERN"
        ;;
    esac
}

# Parse options
while getopts ":htlrdog" opt; do
    case $opt in
      h)
          show_help
          exit 0
          ;;
      t)
          TEMP=$(sensors -u 2> /dev/null| grep -A1 'Package id'| \
                 awk -F': ' '/temp1_input/ {print $2}')
          echo -e "\uf8c7 ${TEMP%%.*}Â°C"
          exit 0
          ;;
      l)
          LOAD=$(awk '{print $1}' /proc/loadavg)
          echo -e "\uf437 $LOAD"
          exit 0
          ;;
      r)
          RAM=$(( $(awk '/^MemAvailable/ {print $2}' /proc/meminfo) \
                    / 1024 / 1024))
          echo -e "\ufb19 $RAM GB"
          exit 0
          ;;
      d)
          DFROOT=$(df| awk '/\/$/ {print $5}')
          DFHOME=$(df| awk '/\/home$/ {print $5}')
          echo -e "\ue216 $DFROOT \uf015 $DFHOME"
          exit 0
          ;;
      o)
          show_os
          exit 0
          ;;
      g)
          GPU=$(nvidia-smi -q -d PIDS| grep 'Process ID')
          [[ $GPU ]] && echo -e "\uf1b2 NVidia" || echo -e "\uf0c8 Intel"
          exit 0
          ;;
      \?)
        printf "%s\n" "Invalid option: -$OPTARG." >&2
        show_usage
        exit 1
        ;;
      :)
        printf "%s\n" "-$OPTARG requires an argument." >&2
        show_usage
        exit 1
        ;;
    esac
done

# ------------------------------------
# COMMANDS AND INFO
# ------------------------------------
[[ -z $* ]] && (show_help && exit 1)

# vim: ft=sh
